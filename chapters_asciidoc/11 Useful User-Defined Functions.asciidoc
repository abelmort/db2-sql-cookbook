== Useful User-Defined Functions

In this section we will describe some simple functions that are generally useful, and that people have asked for over the years. In addition to the functions listed here, there are also the following elsewhere in this book:

* Check character input is a numeric value - <<check.numeric.function>>
* Convert numeric data to character (right justified) - <<user.defined.functions.convert.integer.to.character>>.
* Like-column predicate evaluation - <<like.column.function>>.
* Locate string in input, a block at a time - <<locate.block.user.defined.function>>.
* Pause SQL statement (by looping) for "n" seconds - <<function.to.pause.for.n.seconds>>.
* <<sort.character.field.contents>>.

=== Julian Date Functions

The function below converts a Db2 date into a Julian date (format) value:

.Convert Date into Julian Date
[source,sql]
....
CREATE FUNCTION julian_out(inval DATE)
RETURNS 
  CHAR(7)
RETURN 
  RTRIM(CHAR(YEAR(inval)))
        || 
        SUBSTR(DIGITS(DAYOFYEAR(inval)),8);

SELECT empno
     , CHAR(hiredate, ISO)  AS h_date
     , JULIAN_OUT(hiredate) AS j_date
FROM employee
WHERE empno < '000050'
ORDER BY empno;
....

_ANSWER_
|===
|EMPNO |H_DATE    |J_DATE
|000010|1995-01-01|1995001
|000020|2003-10-10|2003283
|000030|2005-04-05|2005095
|===

The next function does the opposite:

.Convert Julian Date into Date
[source,sql]
....
CREATE FUNCTION julian_in(inval CHAR(7))
RETURNS
  DATE
RETURN
     DATE('0001-01-01')
  + (INT(SUBSTR(inval,1,4)) - 1) YEARS
  + (INT(SUBSTR(inval,5,3)) - 1) DAYS;
....

=== Get Prior Date

Imagine that one wanted to get all rows where some date is for the prior year - relative to the current year. This is easy to code:

.Select rows where hire-date = prior year
[source,sql]
....
SELECT empno
     , hiredate
FROM employee
WHERE YEAR(hiredate) = YEAR(CURRENT DATE) - 1;
....

=== Get Prior Month

One can use the DAYS function to get the same data for the prior day. But one cannot use the MONTH function to do the equivalent for the prior month because at the first of the year the month number goes back to one.

One can address this issue by writing a simple function that multiplies the year-number by 12, and then adds the month-number:

.Create year-month function
[source,sql]
....
CREATE FUNCTION year_month(inval DATE)
RETURNS 
  INTEGER
RETURN 
  (YEAR(inval) * 12) + MONTH(inval);
....

We can use this function thus:

.Select rows where hire-date = prior month
[source,sql]
....
SELECT empno
     , hiredate
FROM employee
WHERE YEAR_MONTH(hiredate) = YEAR_MONTH(CURRENT DATE) - 1;
....

=== Get Prior Week

Selecting rows for the prior week is complicated by the fact that both the US and ISO definitions of a week begin at one at the start of the year (see <<comparing.weeks>>). If however we choose to define a week as a set of seven contiguous days, regardless of the date, we can create a function to do the job. In the example below we shall assume that a week begins on a Sunday:

.Create week-number function
[source,sql]
....
CREATE FUNCTION sunday_week(inval DATE)
RETURNS
  INTEGER
RETURN
  DAYS(inval) / 7;
....

The next function assumes that a week begins on a Monday:

.Create week-number function
[source,sql]
....
CREATE FUNCTION monday_week(inval DATE)
RETURNS
  INTEGER
RETURN
  (DAYS(inval) - 1) / 7;
....

Both the above functions convert the input date into a day-number value, then subtract (if needed) to get to the right day of the week, then divide by seven to get a week-number. The result is the number of weeks since the beginning of the current era. The next query shows the two functions in action:

.Use week-number functions
[source,sql]
....
WITH temp1 (num,dt) AS
(VALUES (1, DATE('2004-12-29'))
   UNION ALL
 SELECT num + 1
      , dt + 1 DAY
 FROM temp1
 WHERE num < 15
),
temp2 (dt, dy) AS
(SELECT dt
      , SUBSTR(DAYNAME(dt),1,3)
 FROM temp1
)
SELECT CHAR(dt, ISO)   AS date
     , dy              AS day
     , WEEK(dt)        AS wk
     , WEEK_ISO(dt)    AS is
     , sunday_week(dt) AS sun_wk
     , monday_week(dt) AS mon_wk
FROM temp2
ORDER BY 1;
....

_ANSWER_
|===
|DATE      |DAY|WK|IS|SUN_WK|MON_WK
|2004-12-29|Wed|53|53|104563|104563
|2004-12-30|Thu|53|53|104563|104563
|2004-12-31|Fri|53|53|104563|104563
|2005-01-01|Sat|1 |53|104563|104563
|2005-01-02|Sun|2 |53|104564|104563
|2005-01-03|Mon|2 |1 |104564|104564
|2005-01-04|Tue|2 |1 |104564|104564
|2005-01-05|Wed|2 |1 |104564|104564
|2005-01-06|Thu|2 |1 |104564|104564
|2005-01-07|Fri|2 |1 |104564|104564
|2005-01-08|Sat|2 |1 |104564|104564
|2005-01-09|Sun|3 |1 |104565|104564
|2005-01-10|Mon|3 |2 |104565|104565
|2005-01-11|Tue|3 |2 |104565|104565
|2005-01-12|Wed|3 |2 |104565|104565
|===

[[generating.numbers]]
==== Generating Numbers

The next function returns a table of rows. Each row consists of a single integer value , starting at zero, and going up to the number given in the input. At least one row is always returned. If the input value is greater than zero, the number of rows returned equals the input value plus one:

.Create num-list function
[source,sql]
....
CREATE FUNCTION NumList(max_num INTEGER)
RETURNS 
  TABLE(num INTEGER)
LANGUAGE SQL
RETURN
  WITH temp1 (num) AS
  (VALUES (0)
     UNION ALL
   SELECT num + 1
   FROM temp1
   WHERE num < max_num
  )
  SELECT num
  FROM temp1;
....

Below are some queries that use the above function:

[source,sql]
....
SELECT *
FROM TABLE(NumList(-1)) AS xxx;
....

_ANSWER_

[cols="",options="header",]
|===
|1
|0
|===

[source,sql]
....
SELECT *
FROM TABLE(NumList(+0)) AS xxx;
....

[cols="",options="header",]
|===
|1
|0
|===

[source,sql]
....
SELECT *
FROM TABLE(NumList(+3)) AS xxx;
....

[cols="",options="header",]
|===
|1
|0
|1
|2
|3
|===

.Using num-list function
[source,sql]
....
SELECT *
FROM TABLE(NumList(CAST(NULL AS INTEGER))) AS xxx;
....

[cols="",options="header",]
|===
|1
|0
|===

NOTE: If this function did not always return one row, we might have to use a left-outer-join when joining to it. Otherwise the calling row might disappear from the answer-set because no row was returned.

To illustrate the function's usefulness, consider the following query, which returns the start and end date for a given set of activities:

.Select activity start & end date
[source,sql]
....
SELECT actno
     , emstdate
     , emendate
     , DAYS(emendate) - DAYS(emstdate) AS #days
FROM emp_act act
WHERE empno   = '000260'
AND   projno  = 'AD3113'
AND   actno   < 100
AND   emptime = 0.5
ORDER BY actno;
....

_ANSWER_
|===
|ACTNO|EMSTDATE  |EMENDATE  |#DAYS
|70   |2002-06-15|2002-07-01|16
|80   |2002-03-01|2002-04-15|45
|===

Imagine that we wanted take the above output, and generate a row for each day between the start and end dates. To do this we first have to calculate the number of days between a given start and end, and then join to the function using that value:

.Generate one row per date between start & end dates (1 of 2)
[source,sql]
....
SELECT actno
     , #days
     , num
     , emstdate + num DAYS AS new_date
FROM
  (SELECT actno
        , emstdate
        , emendate
        , DAYS(emendate) - DAYS(emstdate) AS #days
   FROM emp_act act
   WHERE empno   = '000260'
   AND   projno  = 'AD3113'
   AND   actno   < 100
   AND   emptime = 0.5
) AS aaa
, TABLE(NumList(#days)) AS ttt
ORDER BY actno
       , num;
....

_ANSWER_
|===
|ACTNO|#DAYS|NUM|NEW_DATE
|70   |16   |0  |2002-06-15
|70   |16   |1  |2002-06-16
|70   |16   |2  |2002-06-17
|70   |16   |3  |2002-06-18
|70   |16   |4  |2002-06-19
|70   |16   |5  |2002-06-20
|70   |16   |6  |2002-06-21
|70   |16   |7  |2002-06-22
|70   |16   |8  |2002-06-23
|70   |16   |9  |2002-06-24
|70   |16   |10 |2002-06-25
|     |     |   |etc...
|===

In the above query the #days value equals the number of days between the start and end dates. If the two dates equal, the #days value will be zero. In this case we will still get a row because the function will return a single zero value. If this were not the case (i.e. the function returned no rows if the input value was less than one), we would have to code a left-outer-join with a fake ON statement: 

.Generate one row per date between start & end dates (2 of 2)
[source,sql]
....
SELECT actno
     , #days
     , num
     , emstdate + num DAYS AS new_date
FROM 
  (SELECT actno
        , emstdate
        , emendate
        , DAYS(emendate)- DAYS(emstdate) AS #days
   FROM emp_act act
   WHERE empno   = '000260'
   AND   projno  = 'AD3113'
   AND   actno   < 100 
   AND   emptime = 0.5
) AS aaa
LEFT OUTER JOIN
TABLE(NumList(#days)) AS ttt
ON 1 = 1
ORDER BY actno
       , num;
....
|===
|ACTNO|#DAYS|NUM|NEW_DATE
|70   |16   |0  |2002-06-15
|70   |16   |1  |2002-06-16
|70   |16   |2  |2002-06-17
|70   |16   |3  |2002-06-18
|70   |16   |4  |2002-06-19
|70   |16   |5  |2002-06-20
|70   |16   |6  |2002-06-21
|70   |16   |7  |2002-06-22
|70   |16   |8  |2002-06-23
|70   |16   |9  |2002-06-24
|70   |16   |10 |2002-06-25
|     |     |   |etc...
|===

[[check.data.value.type]]
=== Check Data Value Type

The following function checks to see if an input value is character, where character is defined as meaning that all bytes are "A" through "Z" or blank. It converts (if possible) all bytes to blank using the TRANSLATE function, and then checks to see if the result is blank:

.Check if input value is character
[source,sql]
....
CREATE FUNCTION ISCHAR (inval VARCHAR(250))
RETURNS 
  SMALLINT
LANGUAGE SQL
RETURN
  CASE
    WHEN TRANSLATE(UPPER(inval),' ','ABCDEFGHIJKLMNOPQRSTUVWXYZ') = ' ' THEN 1
    ELSE 0
  END;
....

The next function is similar to the prior, except that it looks to see if all bytes in the input are in the range of "0" through "9", or blank:

.Check if input value is numeric
[source,sql]
....
CREATE FUNCTION ISNUM (inval VARCHAR(250))
RETURNS 
  SMALLINT
LANGUAGE SQL
RETURN
  CASE
    WHEN TRANSLATE(inval,' ','01234567890') = ' ' THEN 1
    ELSE 0
  END;
....

Below is an example of the above two functions in action:

.Example of functions in use
[source,sql]
....
WITH temp (indata) AS
(VALUES ('ABC')
      , ('123')
      , ('3.4')
      , ('-44')
      , ('A1 ')
      , ('  ')
)
SELECT indata         AS indata
     , ISCHAR(indata) AS c
     , ISNUM(indata) AS n
FROM temp;
....

_ANSWER_
|===
|INDATA|C|N
|ABC   |1|0
|123   |0|1
|3.4   |0|0
|-44   |0|0
|A1    |0|0
|      |1|1
|===

The above ISNUM function is a little simplistic. It doesn't check for all-blanks, or embedded blanks, decimal input, or sign indicators. The next function does all of this, and also indicates what type of number was found:

.Check if input value is numeric
[source,sql]
....
CREATE FUNCTION ISNUM2 (inval VARCHAR(255))
RETURNS 
  CHAR(4)
LANGUAGE SQL
RETURN
  CASE 
    WHEN inval = ' '                                          THEN ' '
    WHEN LOCATE(' ',RTRIM(LTRIM(inval))) > 0                  THEN ' '
    WHEN TRANSLATE(inval,' ','01234567890') = inval           THEN ' '
    WHEN TRANSLATE(inval,' ','01234567890') = ' '             THEN 'INT '
    WHEN TRANSLATE(inval,' ','+01234567890') = ' '
     AND LOCATE('+',LTRIM(inval)) = 1
     AND LENGTH(REPLACE(inval,'+','')) = LENGTH(inval) - 1    THEN 'INT+'
    WHEN TRANSLATE(inval,' ','-01234567890') = ' '
     AND LOCATE('-',LTRIM(inval)) = 1
     AND LENGTH(REPLACE(inval,'-','')) = LENGTH(inval) - 1    THEN 'INT-'
    WHEN TRANSLATE(inval,' ','.01234567890') = ' '
     AND LENGTH(REPLACE(inval,'.','')) = LENGTH(inval) - 1    THEN 'DEC '
    WHEN TRANSLATE(inval,' ','+.01234567890') = ' '
     AND LOCATE('+',LTRIM(inval)) = 1
     AND LENGTH(REPLACE(inval,'+','')) = LENGTH(inval) - 1
     AND LENGTH(REPLACE(inval,'.','')) = LENGTH(inval) - 1    THEN 'DEC+'
    WHEN TRANSLATE(inval,' ','-.01234567890') = ' '
     AND LOCATE('-',LTRIM(inval)) = 1
     AND LENGTH(REPLACE(inval,'-','')) = LENGTH(inval) - 1
     AND LENGTH(REPLACE(inval,'.','')) = LENGTH(inval) - 1    THEN 'DEC-'
    ELSE ' '
  END;
....

The first three WHEN checks above are looking for non-numeric input:

* The input is blank.
* The input has embedded blanks.
* The input does not contain any digits.

The final five WHEN checks look for a specific types of numeric input. They are all similar in design, so we can use the last one (looking of negative decimal input) to illustrate how they all work: 

* Check that the input consists only of digits, dots, the minus sign, and blanks.
* Check that the minus sign is the left-most non-blank character.
* Check that there is only one minus sign in the input.
* Check that there is only one dot in the input.

Below is an example of the above function in use:

.Example of function in use
[source,sql]
....
WITH temp (indata) AS
(VALUES ('ABC')
      , ('123')
      , ('3.4')
      , ('-44')
      , ('+11')
      , ('-1-')
      , ('12+')
      , ('+.1')
      , ('-0.')
      , ('  ')
      , ('1 1')
      , (' . ')
)
SELECT indata         AS indata
     , ISNUM2(indata) AS type
     , CASE
         WHEN ISNUM2(indata) <> '' THEN DEC(indata,5,2)
         ELSE NULL
       END           AS number
FROM temp;
....

_ANSWER_
|===
|INDATA|TYPE| NUMBER
|ABC   |    |-
|123   |INT |123.00 
|3.4   |DEC ||3.40
|-44   |INT |-44.00
|+11   |INT+|11.00
|-1-   |    |-
|12+   |    |-
|+.1   |DEC+|0.10
|-0.   |DEC |0.00
|      |    |-
|1 1   |    |-
|.     |    |-
|===

=== Hash Function

The following hash function is a little crude, but it works. It accepts a VARCHAR string as input, then walks the string and, one byte at a time, manipulates a floating point number. At the end of the process the floating point value is translated into BIGINT.

IMPORTANT: This example uses an "!" as the stmt delimiter.

.Create HASH_STRING function
[source,sql]
....
CREATE FUNCTION HASH_STRING (instr VARCHAR(30000))
RETURNS 
  BIGINT
DETERMINISTIC
CONTAINS SQL
NO EXTERNAL ACTION
BEGIN ATOMIC
  DECLARE inlen SMALLINT;
  DECLARE curbit SMALLINT DEFAULT 1;
  DECLARE outnum DOUBLE DEFAULT 0;
  SET inlen = LENGTH(instr);
  WHILE curbit <= inlen 
  DO 
    SET outnum = (outnum * 123) + ASCII(SUBSTR(instr,curbit));
    IF outnum > 1E10 THEN
      SET outnum = outnum / 1.2345E6;
    END IF;
    SET curbit = curbit + 1;
  END WHILE;
  RETURN BIGINT(TRANSLATE(CHAR(outnum),'01','.E'));
END!
....

Below is an example of the function in use:

.HASH_STRING function usage
[source,sql]
....
SELECT id
     , name
     , HASH_STRING(name) AS hash_val
FROM staff s
WHERE id < 70
ORDER BY id!
....

_ANSWER_
|===
|ID|NAME    |HASH_VAL
|10|Sanders |203506538768383718
|20|Pernal  |108434258721263716
|30|Marenghi|201743899927085914
|40|O'Brien |202251277018590318
|50|Hanes   |103496977706763914
|60|Quigley |202990889019520318
|===

One way to judge a hash function is to look at the number of distinct values generated for a given number of input strings. Below is a very simple test:

.HASH_FUNCTION test
[source,sql]
....
WITH
temp1 (col1) AS
(VALUES (1)
   UNION ALL
 SELECT col1 + 1
 FROM temp1
 WHERE col1 < 100000
)
SELECT COUNT(*)                                  AS #rows
     , COUNT(DISTINCT HASH_STRING(CHAR(col1)))   AS #hash1
     , COUNT(DISTINCT HASH_STRING(DIGITS(col1))) AS #hash2
FROM temp1!
....

ANSWER
|===
|#ROWS |#HASH1|#HASH2
|100000|100000|100000
|===


